  /*********************** rexx ****************************************
   *
   *   ROUTINE:      REXXFORM
   *
   *   PURPOSE:      Structure/indent REXX execs
   *
   *   AUTHOR:       Robert Fowles, 02/04/84
   *                 (based on original exec by Jeffery Almoney)
   *                 Pennsylvania State University
   *                 Center for Academic Computing
   *                 107 Computer Building
   *                 University Park, PA  16802
   *                 814 865-4774
   *                 SHARE Installation code: PSU
   *                 Bitnet: RBF@PSUVM
   *                 Internet: RBF@PSUVM.PSU.EDU
   *
   *   REVISIONS:
   *    11/20/90 RBF Include changes made in 07/25/85 by Denis J. Audet,
   *                 Computing Centre, Univ of Ottawa: refine
   *                 detection of comments and quotes across split
   *                 lines, prevent truncation.  Make changes based on
   *                 ideas from PHS3@WATDCS.
   *    11/20/90 RBF Change syntax to allow: reformatting of selected
   *                 parts of file; left margin for all lines.  Move
   *                 Help info to Help File.
   *    12/16/90 RBF Change name to REXXFORM (old name REXFORM).
   *    03/17/91 RBF Add more syntax checking.
   *    06/04/99 PHS Fix continuation detection after end-of-line comment;
   *                 try to adjust end-of-line comments to make lines fit;
   *                 mark unfittable lines via SET SELECT.
   *    06/15/02 PHS Fix lines starting with literal ending in ":"
   *    04/14/17 LBD Update to work as an ISPF Edit Macro
   *    04/17/17 LBD Clean up and change ? to call ISPF Tutorial Panel
   *                 Remove target
   *                 Fix not processing the last record
   *                 Change messages to ispf message lines
   *                 Add max line length to report out
   *    04/18/17 LBD Add message about options in use
   *                 Use right boundary for truncation instead of lrecl
   *    04/24/17 LBD Support record selection S/SS/S#
   *********************************************************************/
   Address ISREdit
   'macro NOPROCESS (a)'

   if a='?' then call Help
   signal on syntax

   'Process Range S'
   "(startl) = linenum .zfrange"
   "(endl) = linenum .zlrange"
   'reset'
   startl = startl + 0
   endl   = endl   + 0
   '(left truncl) = bounds'
   maxlinel = 0
   docnt = 0;selcnt = 0;endcnt = 0;trunccnt = 0
   truncrec = ''

   cj=0; ci=0;
   call ScanOpts
   com=0; dqu=0; squ=0; indent=0; cont=0; unbal=''; lines=0;
   ds='';   /* Line-number stack for DO's and SELECT's.              */
   es='';   /* Line-number stack for END's.                          */
   do i=startl to endl
      lines=lines+1
      '(line) = line' i
      line = strip(line,'T')
      sline=strip(line,'L')
      if sline=' ' then iterate i
      w1=' 'translate(word(sline,1))
      parse var w1 w1 "'"
      parse var w1 w1 '"'
      lw=translate(word(line,words(sline)))
      j = Lscan(sline)
      if j>0 then lastdo=i
      else if j<0 then indent=indent+j
      if indent<0 then indent=1
      if dqu > 0 | squ > 0 then do
         if dqu = 2 then dqu = 0
         if squ = 2 then squ = 0
         iterate
      end
      else do
         if com>0 then do
            if cj then repline= sline
            else if ci then repline=,
              substr(' ',1,lm+(indent)*in) || sline
            else repline= line
            if com>1 then com=0
         end
         else
         if (substr(w1,length(w1),1)=':' | word(line,2)=':') &,
           index(w1, "'") = 0
         then repline=substr(' ',1,max(0,lm+(indent-1)*in))||sline
         else
         repline= substr(' ',1,lm+cont+indent*in)||sline
         if length(repline) > truncl then        /* It won't fit ... */
         if right(line, 2) == '*/' then do          /* Try to fix it */
            xyzzy = length(repline) - length(line) /* Get l'overflow */
            plugh = index(repline, copies(' ', xyzzy)' /* ') /* Cmt? */
            if plugh > 0 then     /* Got comment start & end, fix it */
            repline = delstr(repline, plugh, xyzzy) /* Delete blanks */
         end

         if length(repline) > truncl then do /* It still won't fit */
            'line_after' i ,
              '= msgline  ">> Above record would be truncated <<"'
            trunccnt = trunccnt + 1
            truncrec = truncrec i
         end
         else if repline == line then nop
         else 'line' i ' = (repline)'
         if maxlinel < length(repline)
         then maxlinel = length(repline)
         if com == -1 then com = 1
         else if dqu == -1 then dqu = 1
         else if squ == -1 then squ = 1
         else if substr(lw,length(lw))=',' then cont=2
         else cont=0
      end
      if j>0 then indent=indent+j
   end

   'up m'
   if startl > 1 then 'down' startl - 1

   'line_before' startl ' = msgline "REXXFORM REXX Code Reformat Command"'
   hopt = ''
   if ci then hopt = 'and CI'
   if cj then hopt = 'and Cj'
   'line_before' startl ' = msgline "Options:  Left:' lm+1 'Indent:' in ,
     hopt '"'
   if es<>'' then do
      'line_before' startl ' = msgline "Unbalanced ENDs at lines:' es '"'
   end
   if ds<>'' then do
      nds=''
      do i=1 to words(ds)
         nds=word(ds,i) nds
         'line_after' word(ds,i) '= msgline' ,
           '">> Above record is unbalanced DO or SELECT <<"'
      end
      'line_before' startl ,
        ' = msgline "Unbalanced DOs or SELECTs at lines:' nds '"'
   end
   if com>0 then
   'line_before' startl ' = msgline "Unbalanced comment"'
   if squ+dqu>0 then
   'line_before' startl ' = msgline "Unbalanced string comment"'
   if trunccnt > 0 then
   'line_before' startl ' = msgline "Potential Truncation' ,
     'at lines:' truncrec '"'
   'line_before' startl ' = msgline "Lines restructured from' ,
     startl 'to' endl'"'
   'line_before' startl ' = msgline "Longest record of' maxlinel '"'
   'line_before' startl ' = msgline "Counts Do:' docnt ,
     'Select:' selcnt 'End:' endcnt '"'
   exit 0

ScanOpts:
   a = translate(a)
   i=pos('(',a)
   if i>0 then if pos('(',a,i+1)>0
   then call Errstop 'Left parentheses not allowed operandss'
   parse var a lm in r '(' opts
   if lm = '' then lm = 4
   if in = '' then in = 3
   if datatype(lm,'W')=0 | datatype(in,'W')=0 then call Errstop,
     'Left margin and Indent values must be whole numbers'
   if lm<0 | in<0 then call Errstop,
     'Left margin and Indent values cannot be negative'
   if r<>'' then call Errstop 'Incorrect arguments'
   if lm+in>truncl then call Errstop,
     'Left margin plus Indent value cannot exceed the TRUNC setting'
   if lm=0 then call Errstop 'Left margin value must be greater than 0'
   if lm>truncl
   then call Errstop 'Left margin can''t exceed TRUNC setting'
   lm=lm-1
   do i=1 to words(opts)
      s=word(opts,i)
      select
         when s='CJ' then cj=1
         when s='CI' then ci=1
         otherwise call ErrStop 'Incorrect arguments'
      end
   end
   'up m'
   return

Lscan: Procedure expose com dqu squ i ds es lw ,
     docnt selcnt endcnt trunccnt
   arg s
   Select
      when com=1 then do
         k= pos('*/',s)
         if k>0 then do
            s= substr(s,k+2)
            com=2
         end
         else return 0
      end
      when dqu=1 then do
         k= pos('"',s)
         if k>0 then do
            s= substr(s,k+1)
            dqu=2
         end
         else return 0
      end
      when squ=1 then do
         k= pos("'",s)
         if k>0 then do
            s= substr(s,k+1)
            squ=2
         end
         else return 0
      end
      otherwise nop
   End
   qu = 0
   do until s2 = '' | s = ' '
      ls = 1+length(s)
      kcom = pos('/*',s)
      if kcom=0 then kcom=ls
      kdqu = pos('"',s)
      if kdqu=0 then kdqu=ls
      ksqu = pos("'",s)
      if ksqu=0 then ksqu=ls
      select
         when kcom<kdqu & kcom<ksqu then do
            if pos('*/',s,kcom+2) = 0 then do
               com = com-1
               parse var s s '/*'
               s2 = ''
            end
            else do
               parse var s s1 '/*' s2 '*/' s3
               s2 = '*'
               s=s1 s3
               /* The following is to fix continuation detection when
               the line ends in a comment.
               */
               if s <> '' then            /* If we have anything ... */
               lw=translate(word(s,words(s)))   /* ...reset lastword */
            end
            iterate
         end
         when ksqu<kdqu then do
            qu = 1
            if pos("'",s,ksqu+1) = 0 then do
               squ = squ-1
               parse var s s "'"
               s2 = ''
            end
            else do
               parse var s s1 "'" s2 "'" s3
               s2 = '*'
               s=s1 s2 s3
            end
            iterate
         end
         when kdqu<ksqu then do
            qu = 1
            if pos('"',s,kdqu+1) = 0 then do
               dqu = dqu-1
               parse var s s '"'
               s2 = ''
            end
            else do
               parse var s s1 '"' s2 '"' s3
               s2 = '*'
               s=s1 s2 s3
            end
            iterate
         end
         otherwise s2 = ''
      end
   end
   if s = '' then do
      if qu=0 & com<1 & dqu=squ then com = com + 2
      return 0
   end
   k = 0
   s=translate(s,' ',';')
   do j=1 to words(s)
      w=word(s,j)
      select
         when w='DO' then do
            docnt = docnt + 1
            k=k+1; ds=i ds;
         end
         when w='SELECT' then do
            selcnt = selcnt + 1
            k=k+1; ds=i ds;
         end
         when w='END' then do
            endcnt = endcnt + 1
            k=k-1;
            if ds='' then do
               es=es i
               'line_after' i ,
                 '= msgline  ">> Above record is unbalanced END <<"'
            end
            ds=delword(ds,1,1);
         end
         otherwise nop
      end
   end
   return k

Errstop:
   parse arg m
   say m
   exit 16

Help:
   Address ISPExec 'Select PGM(ISPTUTOR) Parm(#RXFM)'
   exit 0

Syntax:
   rr = rc
   say 'REXXFORM LINE:' sigl sourceline(sigl)
   say '+++' errortext(rr)
   say '>>> error at file line 'i
   exit 16
